[options]
	logfile = /var/log/knockd.log

[openSSH]
	sequence    = 7000,8000,9000
	seq_timeout = 5
	command     = /usr/sbin/iptables -A INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
	tcpflags    = syn

[closeSSH]
	sequence    = 9000,8000,7000
	seq_timeout = 5
	command     = /usr/sbin/iptables -D INPUT -s %IP% -p tcp --dport 22 -j ACCEPT
	tcpflags    = syn

[openHTTPS]
	sequence    = 12345,54321,24680,13579
	seq_timeout = 5
	command     = /usr/local/sbin/knock_add -i -c INPUT -p tcp -d 443 -f %IP%
	tcpflags    = syn

# Advanced example with DNAT
#
# Knock to SSH listening in a different internal host:port (192.168.1.100:2443)
#
# Needs a previous rule already active (i.e. during system boot), which is half
# of the work. Knockd will take care of the additional rule to fully allow traffic.
#
# /sbin/iptables -t nat -A PREROUTING -i ppp0 -p tcp --dport 2443 -j DNAT --to-destination 192.168.1.100:2443
#
# It will stay open it during one hour.
#
# From client: knock -4 -d 1000 -v www.mypublicsite.com 12345,23456,34567
#
[internalSSH]
  sequence      = 12345,23456,34567
  seq_timeout   = 10
  tcpflags      = syn
  cmd_timeout   = 3600
  start_command = /usr/local/sbin/knock_helper_ipt.sh -i -f %IP% -d 2443 -p tcp -c FORWARD -m "knockd - internalSSH"
  stop_command = /usr/local/sbin/knock_helper_ipt.sh -x -f %IP% -d 2443 -p tcp -c FORWARD -m "knockd - internalSSH"
